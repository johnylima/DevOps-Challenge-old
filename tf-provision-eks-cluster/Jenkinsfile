pipeline {
    agent any

    parameters {
        string(name: 'workspace', defaultValue: 'Development', description:'workspace to use in Terraform')
        string(name: 'aws_region', defaultValue: 'eu-west-3', description:'Region for AWS Resources')
        string(name: 'naming_prefix', defaultValue: 'EU', description:'Naming prefix for resources')
        string(name: 'company', defaultValue: 'Jumia', description:'Company name for resource tagging')
        string(name: 'environment', defaultValue: 'Development', description:'Application environment for deployment')
        string(name: 'naming_prefix_project', defaultValue: 'EU-DEV-Jumia-Hexa', description:'Full identification')
        string(name: 'project', defaultValue: 'Hexa', description:'Project name')
        string(name: 'application', defaultValue: 'phone-validator', description:'Application name')
        string(name: 'billing_code', defaultValue: 'ACCT8675309', description:'Billing code for resource tagging') 
        string(name: 'aws_account_id', defaultValue: '', description:'')
        string(name: 'aws_access_key', defaultValue: '', description:'')
        string(name: 'aws_secret_key', defaultValue: '', description:'')
    }  

    environment {
        TF_INPUT = "0"
        TF_IN_AUTOMATION = "TRUE"
        TF_LOG = "WARN"
    }

    stages {
        stage('Init'){
            steps {
                sh 'terraform --version'
                sh "terraform init"
                sh "terraform fmt"
            }
        }
        stage('Validate'){
            steps {
                sh 'terraform validate'
            }
        }
        stage('Plan'){
            steps {
                script {
                    try {
                        sh "terraform workspace new ${params.workspace}"
                    } catch (err) {
                        sh "terraform workspace select ${params.workspace}"
                    }
                    sh "terraform plan -var=aws_region=${params.aws_region} -var=naming_prefix=${params.naming_prefix} -var=company=${params.company} -var=environment=${params.environment} -var=naming_prefix_project=${params.naming_prefix_project} -var=project=${params.project} -var=application=${params.application} -var=billing_code=${params.billing_code} -var=aws_account_id=${params.aws_account_id} -var=aws_access_key=${params.aws_access_key} -var=aws_secret_key=${params.aws_secret_key} -out eks-jlhexa-${params.workspace}.tfplan;echo \$? > status"

                    stash name: "eks-${params.workspace}-plan", includes: "eks-${params.workspace}.tfplan"
                }
            }
        }
        
        stage('Apply'){
            steps {
                script{
                    def apply = false
                    try {
                        input message: 'confirm apply', ok: 'Apply Config'
                        apply = true
                    } catch (err) {
                        apply = false

                        sh "terraform destroy -var=aws_region=${params.aws_region} -var=naming_prefix=${params.naming_prefix} -var=company=${params.company} -var=environment=${params.environment} -var=naming_prefix_project=${params.naming_prefix_project} -var=project=${params.project} -var=application=${params.application} -var=billing_code=${params.billing_code}  -var=aws_account_id=${params.aws_account_id} -var=aws_access_key=${params.aws_access_key} -var=aws_secret_key=${params.aws_secret_key}-auto-approve"

                        currentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        unstash "eks-${params.workspace}-plan"
                        sh "terraform apply eks-${params.workspace}.tfplan"
                    }
                }
            }
        }
    }
}